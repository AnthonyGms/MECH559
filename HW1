import numpy as np
import matplotlib.pyplot as plt

# Water parameters
a1w = 8.07131
a2w = 1730.63
a3w = 233.426
psatw = 10**(a1w-a2w/(20+a3w))
# 1,4 dioxane constants
a1d = 7.43155
a2d = 1554.679
a3d = 240.337
psatd = 10**(a1d-a2d/(20+a3d))

# training data
x1 = np.arange(0,1.0 + 0.1,0.1) # (This is enough since x2 is simply 1-x1)
pexp = np.array([28.1, 34.4, 36.7, 36.9, 36.8, 36.7, 36.5, 35.4, 32.9, 27.7, 17.5])

# Plotting locations (where we want to evaluate the trained models)
x = np.arange(0,1.0 + 0.01,0.01)
from scipy.optimize import curve_fit

def my_residuals_NLCF(x,a1,a2):
    f = x*np.exp(a1*(a2*(1-x)/(a1*x+a2*(1-x)))**2.0)*psatw + \
        (1-x)*np.exp(a2*(a1*x/(a1*x+a2*(1-x)))**2.0)*psatd

    return f

# initial guess
A0 = [1,1]

ANLCF, pcov = curve_fit(my_residuals_NLCF, x1, pexp, p0=A0)
fNLCF = my_residuals_NLCF(x, *ANLCF)

plt.plot(x1, pexp, "bo", label="data")
plt.plot(x, fNLCF, "r-", label="NLCF: $A_1$=%2.3f, $A_2$=%2.3f" % tuple(ANLCF))
plt.xlabel("$x_1$")
plt.ylabel("$p_{exp}$")
plt.xlim([-0.05,1.05])
plt.ylim([15,40])
plt.legend()
plt.show()
